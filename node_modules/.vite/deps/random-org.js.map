{
  "version": 3,
  "sources": ["browser-external:url", "browser-external:https", "../../random-org/src/rpc.js", "../../random-org/src/RandomOrg.js", "../../random-org/index.js"],
  "sourcesContent": ["module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"url\" has been externalized for browser compatibility. Cannot access \"url.${key}\" in client code.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"https\" has been externalized for browser compatibility. Cannot access \"https.${key}\" in client code.`)\n    }\n  }\n}))", "var https = require('https');\n\n/**\n * @type {Object} RPCOptions\n * @property {String}  method   - RPC Method to invoke\n * @property {Object}  params   - Parameters to invoke the `method` with.\n * @property {URL}     endpoint - A parsed URL object (from `url` module) to send the request to.\n * @property {Integer} [id]     - Optional. Request id.\n */\n\n/**\n * Sends a JSONRPC v2.0 request using the provided options.\n * @param  {RPCOptions}   options   Request options\n * @return {Promise}                A Promise for the result of the request.\n */\nvar makeRpcRequest = function(options) {\n  return new Promise(function(resolve, reject) {\n    var postData = JSON.stringify({\n      jsonrpc: '2.0',\n      method: options.method,\n      params: options.params,\n      id: options.id || 1\n    });\n    var endpoint = options.endpoint;\n    var requestParams = {\n      protocol: endpoint.protocol,\n      hostname: endpoint.hostname,\n      port: endpoint.port || 443,\n      path: endpoint.path,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Content-Length': Buffer.byteLength(postData, 'utf8')\n      }\n    };\n    var req = https.request(requestParams, function(res) {\n      res.setEncoding('utf8');\n      var responseBody = '';\n      res.on('data', function (chunk) {\n        responseBody += chunk;\n      });\n      res.on('end', function() {\n        try {\n          responseBody = JSON.parse(responseBody);\n          resolve(responseBody);\n        } catch (e) {\n          reject(new Error('Received invalid JSON'));\n        }\n      });\n    });\n    req.on('error', reject);\n    req.write(postData);\n    req.end();\n  });\n}\n\nmodule.exports.makeRpcRequest = makeRpcRequest;\n", "var url = require('url');\nvar makeRpcRequest = require('./rpc').makeRpcRequest;\n\nfunction RandomOrg(opts) {\n  this.apiKey = opts.apiKey;\n  if (typeof this.apiKey !== 'string') {\n    throw new Error('options.apiKey is required & must be a String');\n  }\n\n  this.endpoint = opts.endpoint || 'https://api.random.org/json-rpc/2/invoke';\n  this.endpoint = url.parse(this.endpoint);\n\n  // For testing.\n  this._makeRpcRequest = makeRpcRequest;\n}\n\n[\n  // Basic api methods\n  'generateIntegers',\n  'generateIntegerSequences',\n  'generateDecimalFractions',\n  'generateGaussians',\n  'generateStrings',\n  'generateUUIDs',\n  'generateBlobs',\n  'getUsage',\n  // Signed api methods\n  'generateSignedIntegers',\n  'generateSignedIntegerSequences',\n  'generateSignedDecimalFractions',\n  'generateSignedGaussians',\n  'generateSignedStrings',\n  'generateSignedUUIDs',\n  'generateSignedBlobs',\n  'verifySignature',\n  'getResult',\n].forEach(function(methodName) {\n  RandomOrg.prototype[methodName] = createInvocation(methodName);\n});\n\nRandomOrg.prototype._enrichParams = function(method, params) {\n  if (method === 'verifySignature') {\n    /* The verifySignature method requires no api key (so that anyone\n     * can verify the authenticity of some response). */\n    return params;\n  }\n\n  var requestParams = { apiKey: this.apiKey };\n  Object.keys(params || {}).forEach(function(property) {\n    requestParams[property] = params[property];\n  });\n  return requestParams;\n}\n\nfunction createInvocation(methodName) {\n  return function(params) {\n    var requestOpts = {\n      endpoint: this.endpoint,\n      method: methodName,\n      params: this._enrichParams(methodName, params)\n    };\n    return this._makeRpcRequest(requestOpts)\n      .then(function (response) {\n        if (response.error) {\n          var error = new Error(response.error.message);\n          error.code = response.error.code;\n          throw error;\n        } else {\n          return response.result;\n        }\n      });\n  };\n}\n\nmodule.exports = RandomOrg;\n", "module.exports = require('./src/RandomOrg');\n"],
  "mappings": "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",
  "names": []
}
